#Amazon polly will be used to convert text generated by open ai into speeches 
import os
import boto3
from botocore.exceptions import BotoCoreError, ClientError

def generate_voice_over(script_data, job_id):
    """ Generate voiceover for all slides using Amazon Polly
    Returns the path to the generated audio file
    """
    
    #creates temp directory for this job if it doesn't exist
    temp_dir = f'/tmp/keyframe_job_{job_id}'
    os.makedirs(temp_dir, exist_ok=True)
    
    #initializes polly client with credentials from environment
    polly_client = boto3.client(
        'polly',
        aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
        aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
        region_name=os.getenv('AWS_REGION', 'us-east-1')
    )
    
    try:
        #get all the narrations from the slides
        slides = script_data.get('slides', [])
        
        #concatenates all narrations with pauses between them
        full_narration = []
        for i, slide in enumerate(slides):
            narration = slide.get('narration', '')
            
            #adds the narration text
            full_narration.append(narration)
            
            #adds a small pause between slides (except after the last one)
            if i < len(slides) - 1:
                full_narration.append('<break time="300ms"/>')
        
        # join everything into one string
        narration_text = ' '.join(full_narration)
        ssml_text = f'<speak>{narration_text}</speak>'  # FIXED - removed extra spaces
        
        print(f"Generating voiceover ({len(narration_text)} characters)...")
        
        # call amazon polly to synthesize speech
        response = polly_client.synthesize_speech(
            Text=ssml_text,
            TextType='ssml',  # using SSML for pauses
            OutputFormat='mp3',
            VoiceId='Joanna',  # for now joanna but it could be Matthew or let the user pick in future.
            Engine='standard'  
        )
        
        #gets the audio stream from the response
        audio_stream = response.get('AudioStream')
        
        if audio_stream:
            #saves the audio to a file
            audio_path = os.path.join(temp_dir, 'voiceover.mp3')
            
            with open(audio_path, 'wb') as file:
                file.write(audio_stream.read())
            
            print(f"Voiceover generated successfully: {audio_path}")
            return audio_path
        else:
            raise Exception("No audio stream received from Polly")
            
    except (BotoCoreError, ClientError) as error:
        print(f"Error generating voiceover with Polly: {error}")
        raise
    except Exception as e:
        print(f"Unexpected error generating voiceover: {e}")
        raise

def get_audio_duration(audio_path):
    """
    Helper function to get the duration of an audio file
    Useful for debugging timing issues
    """
    try:
        from mutagen.mp3 import MP3
        audio = MP3(audio_path)
        return audio.info.length
    except Exception as e:
        print(f"Could not get audio duration: {e}")
        return None